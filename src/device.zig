const std = @import("std");

const DEFAULT_FONT = [80]u8{
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

pub const Device = struct {
    const Self = @This();

    allocator: *std.mem.Allocator,
    memory: []u8,  // ram para emulador 
  
  // cria um novo dispositivo
  pub fn create (allocator:std.mem.Allocator) !Self{
    _ = allocator;

  }

  // libera o dispositivo

pub fn free (self: *Self) void {
  _ = self;

}


// carrega raw ROM data para a mem√≥ria

  pub fn loadProgramIntoMemory(self: *Self, program: []u8) void {
    _ = program;
    _ = self;

  }

  // carrega a rom data de um arquivo
  pub fn loadRomFromFile(self: *Self, path: []const u8) bool {
    _ = path;
    _ = self;

  }


};


